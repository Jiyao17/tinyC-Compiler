
int do_addition(int a, int b)
{
    if (a == 0)
        return b;
    if (b == 0)
        return a;
    
    return (a+b);
}


int main(void)
{
    int a = 0;
    int b = 0;
    int c = 0;

    printf("please input two integer values separated by whitespace:\n");
    scanf("%d %d", &a, &b);

    c = do_addition(a, b);

    printf("%d + %d = %d \n", a, b, c);

    return 0;
}


FUNC_ARG_LIST:    
                | '&' TK_NAME_ID ',' FUNC_ARG_LIST { printf("FUNC_ARG_LIST(POINTER) detected.\n"); }
                | EXPR { printf("FUNC_ARG_LIST(EXPR) detected.\n"); }
                | EXPR ',' FUNC_ARG_LIST { printf("FUNC_ARG_LIST(EXPR,LIST) detected.\n"); }
                ;



int calculate(int x)
{
    int i = 1;
    int sum = 0;
    while(i <= x)
    {
        sum = sum + i;
    }

    return sum;
}

int main()
{
    x >;
    int a = 0;
    printf("Please input an integer between 1 and 100:\n");
    scanf("%d", &a);

    if(a < 1)
        printf("The number is too small!");
    else if (a > 100)
        printf("The number is too large!");
    else
        printf("The sum is %d\n", calculate(a));
    
    return 0;

}


Node* makeNode(int nodeIndex, Node* lchild, Node* rchild)
{
        Node* node = malloc(sizeof(Node));
        node->type = nodeIndex;
        node->childNum = 2;
        node->children[0] = lchild;
        node->children[1] = rchild;

}

typedef struct{
        char name[NAME_LEN_MAX];
        int type;
}Symbol;
Symbol* symbolTable[TABLE_LEN_MAX];


CONST:    TK_CONS_INT { int* pVal = malloc(sizeof(int)); *pVal = atoi(yytext()); $$ = makeLeaf(268, pVal); }
        | TK_CONS_FLOAT { double* pVal = malloc(sizeof(double)); *pVal = atof(yytext()); $$ = makeLeaf(270, (int*)pVal); }
        | TK_CONS_CHAR { char* pVal = malloc(sizeof(char)); *pVal = yytext()[0]; $$ = makeLeaf(269, (int*)pVal); }
        | TK_CONS_STRING  { $$ = makeLeaf(271, (int*)yytext()); }
        ;

        void printNode(Node* node)
{
        printf("%d %s\n", node->type, node->pattern);
}



$$ = makeLeaf(0, "empty FUNC_VAR_DEF_LIST"); 

$$ = $1; $$ = mergeChildren($$, $2); 